resource "aws_lb_target_group" "ec2_tg_alb" {
  name        = "ec2-target-group"
  port        = 80
  protocol    = "HTTP"
  vpc_id      = local.vpc_id
  target_type = "instance"

  health_check {
    path                = "/"
    protocol            = "HTTP"
    matcher             = "200"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }
}

# #Attachment of EC2 instances to the target group
# resource "aws_lb_target_group_attachment" "ec2_instance_attachment_1" {
#   target_group_arn = aws_lb_target_group.ec2_tg_alb.arn
#   target_id        = aws_instance.ec2-instance-free-1.id
#   port             = 80
# }
# resource "aws_lb_target_group_attachment" "ec2_instance_attachment_2" {
#   target_group_arn = aws_lb_target_group.ec2_tg_alb.arn
#   target_id        = aws_instance.ec2-instance-free-2.id
#   port             = 80
# }
resource "aws_lb" "ec2_load_balancer" {
  name               = "ec2-load-balancer"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.sg-ssh-and-80.id]
  subnets            = local.subnets

  enable_deletion_protection = false

  tags = {
    Name = "EC2LoadBalancer"
  }
}

resource "aws_lb_listener" "ec2_listener_alb" {
  load_balancer_arn = aws_lb.ec2_load_balancer.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.ec2_tg_alb.arn
  }
}


# resource "aws_lb" "application_lb" {
#   name               = "app-load-balancer"
#   internal           = false
#   load_balancer_type = "application"
#   security_groups    = [aws_security_group.sg-http80-only.id]
#   subnets            = local.subnets

#   enable_deletion_protection = false
#   tags = {
#     Name = "AppLoadBalancer"
#   }
# }